# -*- coding: utf-8 -*-
"""Aula 14 - Estatística (gab).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QwQE1IKz3nXFV_yxnLMuP14ThK0jnQHz

# Aula 14 - Estatística

## Exercício 1

Faça funções em Python em células do Jupyter Notebook para calcular a média:

a. Aritmética

b. Geométrica

c. Harmônica

d. Verifique que: ari>geo>harm

Use como entrada x =[39, 38, 27, 22, 20, 17, 10, 10, 10, 10, 7, 7, 7, 7, 6]
"""

def media_aritmetica(x):
    N = len(x)
    soma = 0
    for xi in x:
        soma = soma+xi
    media = soma/N
    return(media)

def media_geometrica(x):
    N = len(x)
    multiplicacao = 1
    for xi in x:
        multiplicacao = multiplicacao*xi
    media = multiplicacao**(1/N)
    return(media)

def media_harmonica(x):
    N = len(x)
    soma = 0
    for xi in x:
        soma = soma+(1/xi)
    media = N/soma
    return(media)

x =[39, 38, 27, 22, 20, 17, 10, 10, 10, 10, 7, 7, 7, 7, 6]

media_aritmetica(x)

media_geometrica(x)

media_harmonica(x)

"""## Exercício 2

Faça uma função em Python em uma célula do Jupyter Notebook para calcular a média ponderada.

Ela deve receber dois vetores (listas) como entrada. 

Use o mesmo x do exercício anterior com os pesos w = [113, 88, 58, 65, 71, 46, 36, 33, 37, 40, 24, 21, 20, 15, 20]
"""

def media_ponderada(x,w):
    if len(x) == len(w):
        soma_xw = 0
        soma_w = 0
        for i in range(0,len(x)):
            soma_xw = soma_xw + x[i]*w[i]
            soma_w = soma_w + w[i]  
        media=soma_xw/soma_w
    else:
        print("Os vetores não tem o mesmo tamanho!")
        media = 0
    
    return(media)

# Entradas
x = [39, 38, 27, 22, 20, 17, 10, 10, 10, 10, 7, 7, 7, 7, 6]
w = [113, 88, 58, 65, 71, 46, 36, 33, 37, 40, 24, 21, 20, 15, 20]

media_ponderada(x,w)

"""## Exercício 3

Faça uma função em Python em uma célula do Jupyter Notebook para calcular a **moda** e a **mediana**.

Para testar, use como entrada x = [39, 38, 27, 22, 20, 17, 10, 10, 10, 10, 7, 7, 7, 7, 6]
"""

def mediana(x):
    x.sort()  #Para ordenar
    N = len(x)
    #print(N)
    if N % 2 == 0: # Operacao resto para descobrir se N é par (se o resto é zero ao dividir por 2, entao é par)
        a = int(N/2-1)
        b = int(N/2)
        #print('posicoes do vetor consideradas',a,b)
        mediana = (x[a]+x[b])/2 
    else: # É impar
        # string é um vetor de caracteres
        a = int(str(N/2)[0])
        #print(a)
        mediana = x[a]
    return(mediana)

def moda(x):
    temp = 2  # Uma variavel temporaria para armazenar a maior frequencia que um valor aparece
    moda=[]   # Vetor para armazenar diferentes valores possiveis para moda
    for xi in x: # Vamos percorrer todo o vetor x
        frequencia = x.count(xi)  # Conta quantas vezes um determinado valor xi aparece no vetor x
        if frequencia >= temp:
            if frequencia > temp:
                moda = []
            temp = frequencia
            if xi not in moda:
                moda.append(xi)          
    return(moda)

x = [39, 38, 27, 22, 20, 17, 10, 10, 10, 10, 7, 7, 7, 7, 6]

mediana(x)

moda(x)

"""## Exercício 4

Faça funções para calcular a variância amostral, variância populacional, desvio padrão amostral, desvio padrão populacional e incerteza da média.
"""

x = [39, 38, 27, 22, 20, 17, 10, 10, 10, 10, 7, 7, 7, 7, 6]

def variancia_amostral(x):
    media = media_aritmetica(x)
    N = len(x)
    soma = 0
    for xi in x:
        soma = soma+(xi-media)**2
    variancia = soma/(N-1)
    return(variancia)

def variancia_populacional(x):
    media = media_aritmetica(x)
    N = len(x)
    soma=0
    for xi in x:
        soma = soma+(xi-media)**2
    variancia = soma/N
    return(variancia)

def desvio_padrao_populacional(x):
    desvio_padrao = variancia_populacional(x)**(1/2) # Tirar raiz quadrada é a mesma coisa do que elevar a meio
    return(desvio_padrao)

def desvio_padrao_amostral(x):
    desvio_padrao = variancia_amostral(x)**(1/2) # Tirar raiz quadrada é a mesma coisa do que elevar a meio
    return(desvio_padrao)

def incerteza_media(x):
    N = len(x)
    media = media_aritmetica(x)
    soma=0
    for xi in x:
        soma = soma+(xi-media)**2
    sem = (soma/(N*(N-1)))**(1/2)
    return(sem)

variancia_amostral(x)

variancia_populacional(x)

desvio_padrao_populacional(x)

desvio_padrao_amostral(x)

incerteza_media(x)

"""---------------------

## Exercício 5
Refaça os exercícios anteriores usando as funções prontas de estatística do Numpy.

Você pode ver como usá-las aqui: https://numpy.org/doc/stable/reference/routines.statistics.html
"""

import numpy as np

# Entradas
x = [39, 38, 27, 22, 20, 17, 10, 10, 10, 10, 7, 7, 7, 7, 6]
w = [113, 88, 58, 65, 71, 46, 36, 33, 37, 40, 24, 21, 20, 15, 20]

# Media
np.mean(x)

# Media geometrica
# Nao tem

# Média Harmonica
# nao tem

# Média Ponderada
np.average(x, weights=w)

# Mediana
np.median(x)

# Moda
# nao tem

# Variancia populacional
np.var(x)

# Variancia amostral
# nao tem ***

# Desvio padrao populacional
np.std(x)

# Desvio padrao amostral
# nao tem *

# Incerteza da media
# nao tem

"""## Exercício 6

Alguma função você não encontrou pronta no Numpy? 

Procure na internet outra biblioteca que já tenha a função implementada.

Instale (pip install) (se for necessário) e teste para as mesmas entradas
"""

import statistics

# Media geometrica
statistics.geometric_mean(x)

# Media harmonica
statistics.harmonic_mean(x)

statistics.mode(x)

# Moda
statistics.multimode(x)

# Variancia amostral
statistics.variance(x)

# Desvio padrao amostral
statistics.stdev(x)

#import scipy
from scipy import stats

# Incerteza da media
stats.sem(x)

"""## Exercício 7

Faça uma comparação de desempenho das funções testadas usando um vetor de 100 mil valores aleatórios entre 0 e 99. Use o timeit.
"""

int(100*9.99801427e-01)

# Criando um vetor com muitas posicoes

y = [int(yi*100) for yi in np.random.rand(10**3)]

len(y)

# Commented out IPython magic to ensure Python compatibility.
# %timeit -n 10 media_aritmetica(y)

# Commented out IPython magic to ensure Python compatibility.
# %timeit -n 10 np.mean(y)

# Commented out IPython magic to ensure Python compatibility.
# %timeit -n 10 moda(y)

# Commented out IPython magic to ensure Python compatibility.
# %timeit -n 10 statistics.multimode(y)

# Commented out IPython magic to ensure Python compatibility.
# %timeit -n 10 stats.mode(y)

